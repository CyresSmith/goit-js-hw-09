{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,kBAC9BE,KAAMH,SAASC,cAAc,iBAC7BG,OAAQJ,SAASC,cAAc,mBAC/BI,SAAUL,SAASC,cAAc,kBAuBnC,IAAIK,EAAuB,GAe3BR,EAAKC,KAAKQ,iBAAiB,SAbQ,KAEjC,IAAIL,EAAQM,OAAOV,EAAKI,MAAMO,OAC1BN,EAAOK,OAAOV,EAAKK,KAAKM,OACxBL,EAASI,OAAOV,EAAKM,OAAOK,OAEhCH,EAAuB,CAAC,CAAEI,gBAAiB,EAAGC,aAAcT,IAE5D,IAAK,IAAIU,EAAI,EAAGA,GAAKR,EAAQQ,IAC3BN,EAAqBO,KAAK,CAACH,gBAAiBE,EAAGD,aAAcT,GAASC,GAAO,IAMjF,MAAMW,EAAkBC,IACtBA,EAAMC,SAAQC,IACZ,MAAMP,gBAAEA,EAAeC,aAAEA,GAAiBM,EAvC9C,IAAuBC,EAAUhB,EAAVgB,EAwCLR,EAxCeR,EAwCES,EAtC1B,IAAIQ,SAAQ,CAACC,EAASC,KAE3BC,YAAW,KAEaC,KAAKC,SAAW,GAGpCJ,EAAQxB,EAAA6B,OAAOC,QAAQ,qBAAqBR,QAAehB,QAG3DmB,EAAOzB,EAAA6B,OAAOE,QAAQ,oBAAoBT,QAAehB,OAAW,GAGrEA,EAAM,IAER0B,OAAOC,OAAMC,GAAKA,GAuByB,GAC5C,EASJhC,EAAKO,SAASE,iBAAiB,SANX,KAClBwB,MAAMC,iBACNlB,EAAeR,GACfR,EAAKC,KAAKkC,OAAO","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = { \n  form: document.querySelector('.form'),\n  delay: document.querySelector('[name=\"delay\"]'),\n  step: document.querySelector('[name=\"step\"]'),\n  amount: document.querySelector('[name=\"amount\"]'),\n  startBtn: document.querySelector('.button.start'),  \n}\n\nfunction createPromise(position, delay) {\n\n  return new Promise((resolve, reject) => {\n\n    setTimeout(() => {   \n      \n      const shouldResolve = Math.random() > 0.3;\n\n      if (shouldResolve) {        \n        resolve(Notify.success(`Fulfilled promise ${position} in ${delay}ms`));\n      }\n      else {\n        reject(Notify.failure(`Rejected promise ${position} in ${delay}ms`));\n      }\n      \n    }, delay);\n\n  }).then().catch(e => e);\n}\n\nlet PromisesOptionsArray = [];\n\nconst createPromisesOptionsArray = () => {\n\n  let delay = Number(refs.delay.value);\n  let step = Number(refs.step.value);\n  let amount = Number(refs.amount.value);\n\n  PromisesOptionsArray = [{ PromisePosition: 1, PromiseDelay: delay }];\n  \n  for (let i = 2; i <= amount; i++) {\n    PromisesOptionsArray.push({PromisePosition: i, PromiseDelay: delay += step,})    \n  }\n}\n\nrefs.form.addEventListener('input', createPromisesOptionsArray);\n\nconst RenderPromises = (array) => {\n  array.forEach(element => {\n    const { PromisePosition, PromiseDelay } = element;\n    createPromise(PromisePosition, PromiseDelay);\n  });  \n}\n\nconst startRender = () => {\n  event.preventDefault()\n  RenderPromises(PromisesOptionsArray)\n  refs.form.reset()\n};\n\nrefs.startBtn.addEventListener('click', startRender);"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","delay","step","amount","startBtn","$47d4ff9957288465$var$PromisesOptionsArray","addEventListener","Number","value","PromisePosition","PromiseDelay","i","push","$47d4ff9957288465$var$RenderPromises","array","forEach","element","position","Promise","resolve","reject","setTimeout","Math","random","Notify","success","failure","then","catch","e","event","preventDefault","reset"],"version":3,"file":"03-promises.9490cb95.js.map"}